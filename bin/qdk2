#!/usr/bin/env python

from argparse import ArgumentParser, RawTextHelpFormatter
from os.path import (join as pjoin,
                     dirname as pdirname,
                     )
import sys
import logging

if sys.argv[0].startswith('/usr'):
    prefix = '/usr/share/qdk2'
else:
    prefix = pdirname(pdirname(sys.argv[0]))
sys.path.append(pjoin(prefix, 'python'))


from log import LoggingConfiguration
from settings import Settings
from lint import CommandLint
from build import CommandBuild
from create import CommandCreate
from changelog import CommandChangelog
from extract import CommandExtract


LoggingConfiguration.set(logging.DEBUG if Settings.DEBUG else logging.INFO)
Commands = (CommandBuild,
            CommandCreate,
            CommandChangelog,
            CommandExtract,
            CommandLint,
            )


class MyArgumentParser(object):
    """Command-line argument parser
    """
    def __init__(self):
        """Create parser object
        """
        description = ('Assist to create and build QPKG'
                       '')
        epilog = ('',
                  '',)
        parser = ArgumentParser(description=description,
                                epilog='\n'.join(epilog),
                                formatter_class=RawTextHelpFormatter)
        parser.add_argument('-v', '--verbose', action='store_true',
                            default=False, help='verbose')
        subparsers = parser.add_subparsers(help='')

        for c in Commands:
            c.build_argparse(subparsers)

        self.parser = parser

    def parse(self):
        """Parse command-line arguments
        """
        args, extra_args = self.parser.parse_known_args()

        return args, extra_args


def main():
    args, extra_args = MyArgumentParser().parse()
    for c in Commands:
        if c.key in args:
            c(args, extra_args).run()


if __name__ == "__main__":
    main()

# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
